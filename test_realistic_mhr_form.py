#!/usr/bin/env python3
"""
Test MHR consent with realistic web form data
"""

import sys
import os
import json

# Add the project root to Python path
sys.path.append('/Users/osb074/Development/tools/python/Patient-Dashboard')

# Import required modules
from bundler import create_request_bundle

def test_realistic_mhr_consent():
    """Test MHR consent with data that mimics what the actual web form sends"""
    
    print("üåê TESTING: Realistic Web Form - MHR Consent Withdrawal")
    print("="*70)
    
    # Simulate realistic form data as it would come from the diagnostic request form
    form_data_with_consent_withdrawal = {
        'patient_id': 'ballantyne-kelvin-hans',  # Real patient from the server
        'requester': 'generalpractitioner-guthrie-aaron',  # Real practitioner
        'organisation': '05030000-ac10-0242-f1b3-08dde8e839a8',  # Real organization
        'requestCategory': 'Pathology',
        'selectedTests': json.dumps([  # JSON string as sent by frontend
            {"code": "63476009", "display": "Prostate specific antigen measurement", "display_sequence": 1}
        ]),
        'selectedReasons': json.dumps([  # JSON string as sent by frontend
            {"code": "866149003", "display": "Annual visit"}
        ]),
        'fastingStatus': 'Non-fasting',
        'isPregnant': False,  # Pregnancy checkbox not ticked
        'mhrConsentWithdrawn': 'true',  # MHR consent withdrawal checkbox TICKED
        'billingCategory': 'PUBLICPOL',  # Medicare
        'copyTo': json.dumps(['generalpractitioner-guthrie-aaron']),
        'clinicalContext': 'Annual health screening with PSA check',
        'addNarrative': 'true'
    }
    
    print("üìù Form Data (with MHR consent withdrawal):")
    for key, value in form_data_with_consent_withdrawal.items():
        if key == 'mhrConsentWithdrawn':
            print(f"   üîí {key}: {value} ‚Üê MHR consent withdrawal checkbox TICKED")
        elif len(str(value)) > 50:
            print(f"   {key}: {str(value)[:50]}...")
        else:
            print(f"   {key}: {value}")
    
    try:
        print(f"\nüîÑ Creating bundle with MHR consent withdrawal...")
        bundle = create_request_bundle(form_data_with_consent_withdrawal)
        
        print(f"‚úÖ Bundle created successfully!")
        
        # Analyze bundle entries
        entries = bundle.get('entry', [])
        resource_types = {}
        consent_details = []
        
        for entry in entries:
            resource = entry.get('resource', {})
            resource_type = resource.get('resourceType', 'Unknown')
            
            # Count resource types
            resource_types[resource_type] = resource_types.get(resource_type, 0) + 1
            
            # Collect Consent details
            if resource_type == 'Consent':
                consent_details.append({
                    'id': resource.get('id'),
                    'status': resource.get('status'),
                    'scope': resource.get('scope', {}).get('coding', [{}])[0].get('display', 'Unknown'),
                    'category': resource.get('category', [{}])[0].get('coding', [{}])[0].get('display', 'Unknown'),
                    'provision_type': resource.get('provision', {}).get('type', 'Unknown'),
                    'profiles': resource.get('meta', {}).get('profile', [])
                })
        
        print(f"\nüìä Bundle Composition:")
        for resource_type, count in sorted(resource_types.items()):
            if resource_type == 'Consent':
                print(f"   ‚úÖ {resource_type}: {count} ‚Üê MHR Consent Withdrawal resource included!")
            else:
                print(f"      {resource_type}: {count}")
        
        print(f"\nüîí Consent Resource Analysis:")
        if consent_details:
            for i, consent in enumerate(consent_details, 1):
                print(f"   Consent {i}:")
                print(f"      Status: {consent['status']}")
                print(f"      Scope: {consent['scope']}")
                print(f"      Category: {consent['category']}")
                print(f"      Provision Type: {consent['provision_type']}")
                
                # Verify it's the correct profile
                mhr_profile_found = any('mhrconsentwithdrawal' in profile.lower() for profile in consent['profiles'])
                if mhr_profile_found:
                    print(f"      ‚úÖ Uses AU eRequesting MHR Consent Withdrawal profile")
                else:
                    print(f"      ‚ùå Incorrect profile: {consent['profiles']}")
                
                # Verify provision type is 'deny'
                if consent['provision_type'] == 'deny':
                    print(f"      ‚úÖ Correct provision type for consent withdrawal")
                else:
                    print(f"      ‚ùå Unexpected provision type: {consent['provision_type']}")
        else:
            print(f"   ‚ùå No Consent resources found!")
        
        print(f"\nüéØ Web Application Integration Status:")
        if consent_details:
            print(f"   ‚úÖ MHR consent withdrawal checkbox correctly processed")
            print(f"   ‚úÖ Consent resource properly included in bundle")
            print(f"   ‚úÖ Uses correct AU eRequesting profile")
            print(f"   ‚úÖ Provision type set to 'deny' for withdrawal")
            print(f"   ‚úÖ Ready for production deployment")
        else:
            print(f"   ‚ùå MHR consent withdrawal not working")
        
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_realistic_mhr_consent()
